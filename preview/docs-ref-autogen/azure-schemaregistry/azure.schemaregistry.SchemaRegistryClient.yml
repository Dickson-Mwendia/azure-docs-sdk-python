### YamlMime:PythonClass
uid: azure.schemaregistry.SchemaRegistryClient
name: SchemaRegistryClient
fullName: azure.schemaregistry.SchemaRegistryClient
module: azure.schemaregistry
inheritances:
- builtins.object
summary: 'SchemaRegistryClient is as a central schema repository for enterprise-level
  data infrastructure,

  complete with support for versioning and management.'
constructor:
  syntax: SchemaRegistryClient(fully_qualified_namespace, credential, **kwargs)
  parameters:
  - name: fully_qualified_namespace
    description: 'The Schema Registry service fully qualified host name,

      for example my-namespace.servicebus.windows.net.'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: To authenticate to manage the entities of the SchemaRegistry namespace.
    isRequired: true
    types:
    - <xref:TokenCredential>
examples:
- "Create a new instance of the SchemaRegistryClient.<!--[!code-python[Main](les\\\
  sync_samples\\sample_code_schemaregistry.py )]-->\n\n<!-- literal_block {\"ids\"\
  : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
  : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\4\\\\azure-schemaregistry-1.0.0b3\\\\samples\\\
  \\sync_samples\\\\sample_code_schemaregistry.py\", \"xml:space\": \"preserve\",\
  \ \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
  : 1}, \"linenos\": false} -->\n\n````python\n\n   SCHEMAREGISTRY_FQN = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\n\
  \   token_credential = DefaultAzureCredential()\n   schema_registry_client = SchemaRegistryClient(fully_qualified_namespace=SCHEMAREGISTRY_FQN,\
  \ credential=token_credential)\n\n   ````\n"
methods:
- uid: azure.schemaregistry.SchemaRegistryClient.close
  name: close
  summary: 'This method is to close the sockets opened by the client.

    It need not be used when using with a context manager.'
  signature: close()
- uid: azure.schemaregistry.SchemaRegistryClient.get_schema
  name: get_schema
  summary: 'Gets a registered schema by its unique ID.

    Azure Schema Registry guarantees that ID is unique within a namespace.'
  signature: get_schema(id, **kwargs)
  parameters:
  - name: id
    description: References specific schema in registry namespace.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:azure.schemaregistry.Schema>
  examples:
  - "Get schema by id.<!--[!code-python[Main](les\\sync_samples\\sample_code_schemaregistry.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\4\\\\azure-schemaregistry-1.0.0b3\\\\samples\\\\sync_samples\\\\sample_code_schemaregistry.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   schema = schema_registry_client.get_schema(id)\n   schema_definition = schema.schema_definition\n\
    \n   ````\n"
- uid: azure.schemaregistry.SchemaRegistryClient.get_schema_properties
  name: get_schema_properties
  summary: 'Gets the ID referencing an existing schema within the specified schema
    group,

    as matched by schema definition comparison.'
  signature: get_schema_properties(group_name, name, schema_definition, format, **kwargs)
  parameters:
  - name: group_name
    description: Schema group under which schema should be registered.
    isRequired: true
    types:
    - <xref:str>
  - name: name
    description: Name of schema being registered.
    isRequired: true
    types:
    - <xref:str>
  - name: schema_definition
    description: String representation of the schema being registered.
    isRequired: true
    types:
    - <xref:str>
  - name: format
    description: Format for the schema being registered.
    isRequired: true
    types:
    - <xref:Union>[<xref:str>, <xref:azure.schemaregistry.SchemaFormat>]
  return:
    types:
    - <xref:azure.schemaregistry.SchemaProperties>
  examples:
  - "Get schema id.<!--[!code-python[Main](les\\sync_samples\\sample_code_schemaregistry.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\4\\\\azure-schemaregistry-1.0.0b3\\\\samples\\\\sync_samples\\\\sample_code_schemaregistry.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   schema_properties = schema_registry_client.get_schema_properties(group_name,\
    \ name, schema_definition, format)\n   schema_id = schema_properties.id\n\n  \
    \ ````\n"
- uid: azure.schemaregistry.SchemaRegistryClient.register_schema
  name: register_schema
  summary: 'Register new schema. If schema of specified name does not exist in specified
    group,

    schema is created at version 1. If schema of specified name exists already in
    specified group,

    schema is created at latest version + 1.'
  signature: register_schema(group_name, name, schema_definition, format, **kwargs)
  parameters:
  - name: group_name
    description: Schema group under which schema should be registered.
    isRequired: true
    types:
    - <xref:str>
  - name: name
    description: Name of schema being registered.
    isRequired: true
    types:
    - <xref:str>
  - name: schema_definition
    description: String representation of the schema being registered.
    isRequired: true
    types:
    - <xref:str>
  - name: format
    description: 'Format for the schema being registered.

      For now Avro is the only supported schema format by the service.'
    isRequired: true
    types:
    - <xref:Union>[<xref:str>, <xref:azure.schemaregistry.SchemaFormat>]
  return:
    types:
    - <xref:azure.schemaregistry.SchemaProperties>
  examples:
  - "Register a new schema.<!--[!code-python[Main](les\\sync_samples\\sample_code_schemaregistry.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\4\\\\azure-schemaregistry-1.0.0b3\\\\samples\\\\sync_samples\\\\sample_code_schemaregistry.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   GROUP_NAME = os.environ['SCHEMAREGISTRY_GROUP']\n   NAME = 'your-schema-name'\n\
    \   FORMAT = SchemaFormat.AVRO\n   SCHEMA_DEFINITION = \"\"\"{\"namespace\":\"\
    example.avro\",\"type\":\"record\",\"name\":\"User\",\"fields\":[{\"name\":\"\
    name\",\"type\":\"string\"},{\"name\":\"favorite_number\",\"type\":[\"int\",\"\
    null\"]},{\"name\":\"favorite_color\",\"type\":[\"string\",\"null\"]}]}\"\"\"\n\
    \   schema_properties = schema_registry_client.register_schema(GROUP_NAME, NAME,\
    \ SCHEMA_DEFINITION, FORMAT)\n   schema_id = schema_properties.id\n\n   ````\n"
